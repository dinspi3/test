{
	"info": {
		"_postman_id": "c22bddde-301c-44f6-be87-98225a053826",
		"name": "Clearsee Api Testing Reports 16.1.50",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1328afe9-4602-467f-9320-3541889b75f4",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "031283c6-65ce-49e2-a129-8629e7bc506a",
						"exec": [
							"var previousId = pm.globals.get(\"webSessionId\");\r",
							"pm.globals.set(\"webSessionId\", previousId + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "evt",
							"value": "3010"
						},
						{
							"key": "src",
							"value": "mstrWeb.3010"
						},
						{
							"key": "loginReq",
							"value": "true"
						},
						{
							"key": "Server",
							"value": "localhost"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with https and with administrator",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72d9a205-312b-456e-952b-2c972741ee81",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://172.17.0.5:8443/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0",
					"protocol": "https",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8443",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "evt",
							"value": "3010"
						},
						{
							"key": "src",
							"value": "mstrWeb.3010"
						},
						{
							"key": "loginReq",
							"value": "true"
						},
						{
							"key": "Server",
							"value": "localhost"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Policy Line",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4ef89eb1-3477-4b47-85a2-802d4b918490",
						"exec": [
							"console.log('Request 1 pre-request script')"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ccc87f8b-774d-4aec-93ca-664b69671ff0",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=68AA5B3346078E66A99AAAA02FD46C4B",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "68AA5B3346078E66A99AAAA02FD46C4B"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Service Gateways",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f77a4a55-46b8-4cdc-812c-b064f1c35e43",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=09112BA94B876BC5A3B706B5D4B67504",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "09112BA94B876BC5A3B706B5D4B67504"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Policy Pipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a3f361e-bed5-440b-ba7e-bfa2e49a1618",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=F96AB2C34274CB49FE6D74A4A99F93F4",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "F96AB2C34274CB49FE6D74A4A99F93F4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Policy Virtual Channels",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "04001934-6ba4-4eec-a5d4-4b50e9e8c3cd",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=3236C6BE4F7444082B2A7088FE2F4362",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "3236C6BE4F7444082B2A7088FE2F4362"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Busy Hours",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f00d4007-2533-4f26-b31f-0cb689d7f487",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=944F1A1E482A13CF2BFECCBBA91ADB10",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "944F1A1E482A13CF2BFECCBBA91ADB10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Network Statistics Trend ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27e06272-5bb9-494a-afd3-f2469706eefe",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=9BFE161D11E88E4C867C0080EF258D19",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "9BFE161D11E88E4C867C0080EF258D19"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Minutes of Use",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0e4cd71-3cdd-40f7-9478-f62a84d33cf3",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=70EF9852463DC4F16F7F85A291462F25&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "70EF9852463DC4F16F7F85A291462F25"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time - Policy Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8df05655-ead8-4231-a8f2-fda1eb83efd3",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=ADCFBB03414C39DA28FC7A860D501EDC&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "ADCFBB03414C39DA28FC7A860D501EDC"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cell Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b71fca8e-d3ed-46e3-8dfa-df98c6277cea",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Date",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=512CC3F74FD2ACC34F72F19E5DFAC15D&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "512CC3F74FD2ACC34F72F19E5DFAC15D"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HTTP Protocols",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3bbeff2-882b-48c4-8ef0-57610c5da2ec",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=24C69C2F4116065CB5DE0EB19960B4FC&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "24C69C2F4116065CB5DE0EB19960B4FC"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Service Plan Usage ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ab67505-b23b-42e8-9861-a0d4cc0d93a7",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=EB1B0FAE11E33F0D00000080EF65D977&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "EB1B0FAE11E33F0D00000080EF65D977"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time - Network Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "357123c6-10f5-47a2-8e3f-90bcadfcccc4",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=96CE68D84BC8E40EC22BCFB01A8A62DB&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "96CE68D84BC8E40EC22BCFB01A8A62DB"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Device Usage Trend",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "536ae235-8477-4e12-b0b2-1f2e5347efd1",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=4D6C9A054025EDC148C26DAD8C852451&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "4D6C9A054025EDC148C26DAD8C852451"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Encrypted Video QoE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c1b5dbf7-c55e-4f9a-bede-eb9cc9c6e177",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=21B147F411E8B669696C0080EF45FEB1",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "21B147F411E8B669696C0080EF45FEB1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Application Movers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51d93b8c-2b31-4487-b4b1-9f18bc67d85d",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=9F849AC24CE336CEE2C62489AAC7579F&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "9F849AC24CE336CEE2C62489AAC7579F"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Application Trend",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e9b14dd-bff0-4a3d-a912-3f29df7b8f99",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=027D100111E81BA751200080EF5539E0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "027D100111E81BA751200080EF5539E0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Browsing QoE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d35437f9-5eef-484d-9866-3d615619706d",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=3412D0504244E60C4910D19AC291F84F&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "3412D0504244E60C4910D19AC291F84F"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Top Watched Videos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da640c59-27dd-4c76-af72-60b70072e5ab",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=17AC7BF541326F77C73CA28F908E816B&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "17AC7BF541326F77C73CA28F908E816B"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Video Publishers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad149dfb-3e74-46c8-b283-02cbe1b3ec46",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=017775074CEF6AE9ACA5119047EC73F5&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "017775074CEF6AE9ACA5119047EC73F5"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Video Trends",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39e41360-64f2-4903-ac3b-ab195bf1b59a",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=65AC64504E3F59CB0CBF6EAD056E8568&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "65AC64504E3F59CB0CBF6EAD056E8568"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Web Experience",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc42284a-21c5-4946-b91f-6b314f3916b7",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=757C6B694C85F5C28042F39C3E30E3CF&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "757C6B694C85F5C28042F39C3E30E3CF"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Applications Rank",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b106617-74e5-489d-a7c6-0953a1592dbe",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=D31755EC468F1D18B01BF598D9891483",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "D31755EC468F1D18B01BF598D9891483"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Application Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1818a50-028d-4cfc-88de-f2ef5630de75",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=06B368C84E593ECE7110CE914119447A&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "06B368C84E593ECE7110CE914119447A"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Most Active HTTP Domains ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbf11d42-f8c1-4b96-a67a-f020361f0bfe",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=6872D2F549EE7F8B5F156B93951BBB8E",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "6872D2F549EE7F8B5F156B93951BBB8E"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Video Experience",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d85531dd-b1cd-4c8e-9e17-19c7f00d0e3f",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=2CB14BC0491FF40E788B93AEF408CCF3&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "2CB14BC0491FF40E788B93AEF408CCF3"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Video Stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e2a7fa5-1315-40b9-b2fd-f31567510d3a",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=6914E06748459DED58DD36B01AD7BA41&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "6914E06748459DED58DD36B01AD7BA41"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Video Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0569b74b-4cee-4f7d-b2b2-34a9ffbb1921",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=A46FC9EC11E351B800000080EF95C15F&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "A46FC9EC11E351B800000080EF95C15F"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Heavy users Dashboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cf363f4-0c83-4735-99e7-41f3fab3f3b4",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=BB85BF4C11E81D6026190080EFC5D651",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "BB85BF4C11E81D6026190080EFC5D651"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User App Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3cfaf5ac-28a8-4ed6-9879-bd9a081d27bc",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=234ABC75424F0F8A1C1B51AE3E63FDF7&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "234ABC75424F0F8A1C1B51AE3E63FDF7"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user Network Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "10dc8eb4-aefa-4481-95c4-ac8a2bc6c26a",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=61070B1D4D96913ABB1EEF9C0C751C68",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "61070B1D4D96913ABB1EEF9C0C751C68"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Segmentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca02fcec-1cbe-49bf-87be-d2f218a57a1a",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=B74E209911E34B8900000080EF658113&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "B74E209911E34B8900000080EF658113"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Top Sites ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ac3b1d3-0d5f-455f-aad5-b77ef2252609",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=F71FC04C11E3399500000080EFA591CA&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "F71FC04C11E3399500000080EFA591CA"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Heavy Users Trend ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2931fa05-7879-4a9e-a822-a9cebe5026f3",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=6FE9865D4D0C114A6B56F1BEED9F61CD",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "6FE9865D4D0C114A6B56F1BEED9F61CD"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Device Usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "035c34af-5db7-46da-bdf4-200243edb161",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=436F013411E33A1C00000080EF1573CD&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "436F013411E33A1C00000080EF1573CD"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User QoE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32ce503a-6658-4e8d-a449-2b6f32f8aadb",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=1361A08F49689073F478AF88401F17A8&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "1361A08F49689073F478AF88401F17A8"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Tethering",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9eb24577-186b-4b01-8353-c69aad6e7e32",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=6E9D184811E33A2E00000080EFD5F3CC&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "6E9D184811E33A2E00000080EFD5F3CC"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Anti Phishing by Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "871eb569-8494-45f7-b7bd-28c7662ec297",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=26D218E34C6896130F0C31AFFA4F3131",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "26D218E34C6896130F0C31AFFA4F3131"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Change in policies (Last week)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4362ff79-04c7-4b3b-a222-b20a72e038ef",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "92491f25-45f8-4928-8da1-bba424b6365c",
						"exec": [
							"var date = new Date().toISOString();\r",
							"pm.globals.set(\"utcnow\", date);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=2F359DA94F9A1FAF81DEFE87A5F9851F",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "2F359DA94F9A1FAF81DEFE87A5F9851F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time -  Application Group Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32e832c1-662b-418a-a82a-763bc1c04631",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=D7858A7E4D0202EA22729899DC0D09D7&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "D7858A7E4D0202EA22729899DC0D09D7"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time - Client IP Monitor ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e8e9e9b-08cc-48b5-8fc7-4538f2a98e98",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=9041956D44FC8740957F69B586043F9B&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "9041956D44FC8740957F69B586043F9B"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time - User Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0c663db-f3fc-4dc0-bfbd-e184427b3874",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=97F9603542FF6688C1ADC4B0A53C3235&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "97F9603542FF6688C1ADC4B0A53C3235"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time- Application Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0ab77544-b767-49fc-a5b0-0148c8b3deee",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=CE4E8AD54F96F4EF67A03A80ED1455BD&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "CE4E8AD54F96F4EF67A03A80ED1455BD"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Real Time - Create Custom Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c82ccf44-dc20-4c2c-a1cc-98d5a6fcdd38",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=DCEBCC384611A700CDE39DB9011865A9&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "DCEBCC384611A700CDE39DB9011865A9"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Network QoE Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b173633-2f68-433b-b64d-d5788193b640",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=BC57630B414BB348B191AA8F145985EF&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "BC57630B414BB348B191AA8F145985EF"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Top IP Monitor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "feef7705-bce4-41ed-8004-52e0204b0f61",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=2048001&src=mstrWeb.2048001&documentID=C4211B3E11E7241800000080EF355B50&currentViewMedia=2&visMode=0",
					"protocol": "http",
					"host": [
						"172",
						"17",
						"0",
						"5"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "2048001"
						},
						{
							"key": "src",
							"value": "mstrWeb.2048001"
						},
						{
							"key": "documentID",
							"value": "C4211B3E11E7241800000080EF355B50"
						},
						{
							"key": "currentViewMedia",
							"value": "2"
						},
						{
							"key": "visMode",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Service Gateway&Policies",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "19d7bd13-ac3e-491b-bdf6-f4911bb0bb48",
						"exec": [
							"\r",
							"//  check server configuration for caching and encoding of the data. \r",
							"pm.test(\"Content encoding should be set to gzip\", function () {\r",
							"    pm.response.to.be.header(\"Content-Encoding\", \"gzip\"); \r",
							"});\r",
							"\r",
							"//Check response errors\r",
							"pm.test(\"Response should not be error\", function(){\r",
							"    pm.response.to.not.be.error;\r",
							"});\r",
							"\r",
							"//Check Response size: The actual size of your first response (HTML page).\r",
							"pm.test(\"Response size is less than 100KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(100000);\r",
							"});\r",
							"//Code status 200 \r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.sendRequest('http://172.17.0.5:8080/ClearSee/servlet/mstrWeb?evt=3010&src=mstrWeb.3010&loginReq=true&Server=localhost&Project=Allot+Real+-+Dev+2.0&Port=0', function (err, res) {\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Check Date \r",
							"tests[\"Date is present\"] = postman.getResponseHeader(\"Date\");\r",
							"\r",
							"\r",
							"//Check Response time\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Check Response time \r",
							"\r",
							"tests[\"Response time is acceptable\"] = _.inRange(responseTime, 0, 500);\r",
							"\r",
							"// Check body \r",
							"tests[\"Body is not empty\"] = (responseBody!==null || responseBody.length!==0);  \r",
							"\r",
							"// Check valid links on the page \r",
							"var cheerio = require('cheerio');\r",
							"var $ = cheerio.load(pm.response.text());\r",
							"pm.test(\"All links on the page should be valid\", function () {\r",
							"    $('a').each(function(i, elem) {\r",
							"        var originalPath = $(elem).attr('href');\r",
							"        var path = originalPath;\r",
							"\r",
							"        if (path && path[0] === '/') {\r",
							"            path = pm.environment.get('url') + path;       \r",
							"        }\r",
							"\r",
							"        pm.sendRequest(path, function (err, res) {\r",
							"            pm.test('Link with href \"' + originalPath + '\" should be valid', function () {\r",
							"                pm.expect(err).to.equal(null);\r",
							"                pm.expect(res).to.have.property('code', 200);\r",
							"                pm.expect(res).to.have.property('status', 'OK');\r",
							"            });\r",
							"        });\r",
							"    }); \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://10.110.108.59:8080/ClearSee/servlet/mstrWeb?Server=SINGLE&Project=Allot+Real+-+Dev+2.0&Port=0&evt=3140&src=mstrWeb.3140&documentID=E586DDC611E998CF3FE20080EF95B221",
					"protocol": "http",
					"host": [
						"10",
						"110",
						"108",
						"59"
					],
					"port": "8080",
					"path": [
						"ClearSee",
						"servlet",
						"mstrWeb"
					],
					"query": [
						{
							"key": "Server",
							"value": "SINGLE"
						},
						{
							"key": "Project",
							"value": "Allot+Real+-+Dev+2.0"
						},
						{
							"key": "Port",
							"value": "0"
						},
						{
							"key": "evt",
							"value": "3140"
						},
						{
							"key": "src",
							"value": "mstrWeb.3140"
						},
						{
							"key": "documentID",
							"value": "E586DDC611E998CF3FE20080EF95B221"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "adf34625-b268-48c1-861f-27bf9a89ce5f",
				"type": "text/javascript",
				"exec": [
					"var date = new Date().toISOString();",
					"pm.globals.set(\"utcnow\", date);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "78f228e1-d4e3-4f3c-abab-512c8e2b89fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}